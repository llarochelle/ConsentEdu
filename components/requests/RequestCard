import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  Calendar, 
  Users, 
  Eye, 
  Edit, 
  Send, 
  MoreHorizontal,
  Clock,
  CheckCircle2,
  AlertTriangle
} from "lucide-react";
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";

export default function RequestCard({ request, onUpdate }) {
  const getStatusConfig = (status) => {
    const configs = {
      brouillon: {
        color: "bg-slate-100 text-slate-700",
        icon: Edit,
        label: "Brouillon"
      },
      active: {
        color: "bg-blue-100 text-blue-700",
        icon: Clock,
        label: "Active"
      },
      fermee: {
        color: "bg-green-100 text-green-700",
        icon: CheckCircle2,
        label: "Fermée"
      },
      archivee: {
        color: "bg-gray-100 text-gray-700",
        icon: CheckCircle2,
        label: "Archivée"
      }
    };
    return configs[status] || configs.brouillon;
  };

  const getTypeLabel = (type) => {
    const labels = {
      sortie_scolaire: "Sortie scolaire",
      utilisation_photos: "Utilisation photos",
      activite_speciale: "Activité spéciale",
      transport: "Transport",
      medicament: "Médicament",
      autre: "Autre"
    };
    return labels[type] || type;
  };

  const statusConfig = getStatusConfig(request.status);
  const StatusIcon = statusConfig.icon;
  const responseRate = request.emails_sent > 0 
    ? Math.round((request.responses_received / request.emails_sent) * 100)
    : 0;

  const isOverdue = request.deadline && new Date(request.deadline) < new Date() && request.status === "active";

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg hover:shadow-xl transition-all duration-200">
      <CardHeader>
        <div className="flex justify-between items-start">
          <div className="flex-1 min-w-0">
            <div className="flex items-center gap-3 mb-2">
              <CardTitle className="text-xl font-bold text-slate-800 truncate">
                {request.title}
              </CardTitle>
              {isOverdue && (
                <AlertTriangle className="w-5 h-5 text-red-500" />
              )}
            </div>
            <div className="flex flex-wrap gap-2 mb-3">
              <Badge className={statusConfig.color}>
                <StatusIcon className="w-3 h-3 mr-1" />
                {statusConfig.label}
              </Badge>
              <Badge variant="outline">
                {getTypeLabel(request.type)}
              </Badge>
            </div>
          </div>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" size="icon" className="h-8 w-8">
                <MoreHorizontal className="w-4 h-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuItem>
                <Eye className="w-4 h-4 mr-2" />
                Voir les détails
              </DropdownMenuItem>
              {request.status === "brouillon" && (
                <>
                  <DropdownMenuItem>
                    <Edit className="w-4 h-4 mr-2" />
                    Modifier
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <Send className="w-4 h-4 mr-2" />
                    Publier
                  </DropdownMenuItem>
                </>
              )}
              <DropdownMenuSeparator />
              <DropdownMenuItem className="text-red-600">
                Supprimer
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
      </CardHeader>
      <CardContent>
        <p className="text-slate-600 mb-4 line-clamp-2">
          {request.description}
        </p>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
          <div className="flex items-center gap-2 text-sm text-slate-600">
            <Users className="w-4 h-4" />
            <span>{request.target_audience.replace(/_/g, ' ')}</span>
            {request.target_details && (
              <span className="font-medium">({request.target_details})</span>
            )}
          </div>
          
          {request.activity_date && (
            <div className="flex items-center gap-2 text-sm text-slate-600">
              <Calendar className="w-4 h-4" />
              <span>{format(new Date(request.activity_date), "dd MMM yyyy", { locale: fr })}</span>
            </div>
          )}
          
          <div className="flex items-center gap-2 text-sm">
            <Calendar className="w-4 h-4 text-red-500" />
            <span className={isOverdue ? "text-red-600 font-medium" : "text-slate-600"}>
              Échéance: {format(new Date(request.deadline), "dd MMM", { locale: fr })}
            </span>
          </div>
        </div>

        {request.status === "active" && (
          <div className="bg-slate-50 rounded-lg p-4">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-slate-700">Progression des réponses</span>
              <span className="text-sm font-bold text-slate-800">
                {request.responses_received}/{request.emails_sent} ({responseRate}%)
              </span>
            </div>
            <div className="w-full bg-slate-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${responseRate}%` }}
              />
            </div>
            <div className="flex justify-between text-xs text-slate-500 mt-2">
              <span>{request.consent_given} consentements</span>
              <span>{request.responses_received - request.consent_given} refus</span>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}