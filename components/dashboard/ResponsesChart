import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { FileText, Eye, Edit, Calendar } from "lucide-react";
import { format } from "date-fns";
import { fr } from "date-fns/locale";
import { Skeleton } from "@/components/ui/skeleton";

export default function RecentRequests({ requests, isLoading }) {
  const getStatusColor = (status) => {
    const colors = {
      brouillon: "bg-slate-100 text-slate-700",
      active: "bg-blue-100 text-blue-700", 
      fermee: "bg-green-100 text-green-700",
      archivee: "bg-gray-100 text-gray-700"
    };
    return colors[status] || colors.brouillon;
  };

  const getTypeLabel = (type) => {
    const labels = {
      sortie_scolaire: "Sortie scolaire",
      utilisation_photos: "Utilisation photos",
      activite_speciale: "Activité spéciale",
      transport: "Transport",
      medicament: "Médicament",
      autre: "Autre"
    };
    return labels[type] || type;
  };

  if (isLoading) {
    return (
      <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            Demandes récentes
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {Array(5).fill(0).map((_, i) => (
            <div key={i} className="flex items-center justify-between p-4 border rounded-lg">
              <div className="space-y-2">
                <Skeleton className="h-4 w-48" />
                <Skeleton className="h-3 w-32" />
              </div>
              <Skeleton className="h-6 w-20" />
            </div>
          ))}
        </CardContent>
      </Card>
    );
  }

  const recentRequests = requests.slice(0, 5);

  return (
    <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-lg">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-slate-800">
          <FileText className="w-5 h-5" />
          Demandes récentes
        </CardTitle>
      </CardHeader>
      <CardContent>
        {recentRequests.length === 0 ? (
          <div className="text-center py-8">
            <FileText className="w-12 h-12 mx-auto mb-4 text-slate-400" />
            <p className="text-slate-600">Aucune demande créée</p>
          </div>
        ) : (
          <div className="space-y-3">
            {recentRequests.map((request) => (
              <div
                key={request.id}
                className="flex items-center justify-between p-4 rounded-xl border border-slate-100 hover:bg-slate-50/50 transition-all duration-200"
              >
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="font-semibold text-slate-800 truncate">
                      {request.title}
                    </h3>
                    <Badge className={getStatusColor(request.status)}>
                      {request.status}
                    </Badge>
                  </div>
                  <div className="flex items-center gap-4 text-sm text-slate-600">
                    <span>{getTypeLabel(request.type)}</span>
                    <span className="flex items-center gap-1">
                      <Calendar className="w-3 h-3" />
                      {format(new Date(request.created_date), "dd MMM yyyy", { locale: fr })}
                    </span>
                  </div>
                  {request.status === "active" && (
                    <div className="mt-2 text-sm">
                      <span className="text-slate-600">
                        {request.responses_received}/{request.emails_sent} réponses
                      </span>
                      <div className="w-full bg-slate-200 rounded-full h-1.5 mt-1">
                        <div 
                          className="bg-blue-600 h-1.5 rounded-full transition-all duration-300"
                          style={{ 
                            width: `${request.emails_sent > 0 ? (request.responses_received / request.emails_sent) * 100 : 0}%` 
                          }}
                        />
                      </div>
                    </div>
                  )}
                </div>
                <div className="flex gap-2 ml-4">
                  <Button variant="outline" size="icon" className="h-8 w-8">
                    <Eye className="w-4 h-4" />
                  </Button>
                  {request.status === "brouillon" && (
                    <Button variant="outline" size="icon" className="h-8 w-8">
                      <Edit className="w-4 h-4" />
                    </Button>
                  )}
                </div>
              </div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}