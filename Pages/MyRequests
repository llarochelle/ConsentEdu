
import React, { useState, useEffect, useCallback } from "react";
import { ConsentRequest } from "@/entities/ConsentRequest";
import { ConsentResponse } from "@/entities/ConsentResponse";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { 
  Search, 
  Filter, 
  FileText, 
  Clock,
  CheckCircle,
  Archive,
  Edit,
  Trash2,
  Eye
} from "lucide-react";
import { format } from "date-fns";
import { fr } from "date-fns/locale";

import RequestCard from "../components/requests/RequestCard";
import FilterBar from "../components/requests/FilterBar";

export default function MyRequests() {
  const [requests, setRequests] = useState([]);
  const [filteredRequests, setFilteredRequests] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [activeTab, setActiveTab] = useState("all");
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadRequests();
  }, []);

  // Corrected useEffect: Combine filtering logic directly into a useEffect
  // that depends on requests, searchTerm, and activeTab, removing the need
  // for useCallback and the separate useEffect.
  useEffect(() => {
    let filtered = [...requests];

    // Filtrage par onglet
    if (activeTab !== "all") {
      filtered = filtered.filter(req => req.status === activeTab);
    }

    // Filtrage par recherche
    if (searchTerm) {
      filtered = filtered.filter(req => 
        req.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        req.description.toLowerCase().includes(searchTerm.toLowerCase())
      );
    }

    setFilteredRequests(filtered);
  }, [requests, searchTerm, activeTab]); // Dependencies are directly listed here

  const loadRequests = async () => {
    setIsLoading(true);
    try {
      const data = await ConsentRequest.list("-created_date");
      setRequests(data);
    } catch (error) {
      console.error("Erreur lors du chargement:", error);
    }
    setIsLoading(false);
  };

  const getStatusBadge = (status) => {
    const variants = {
      brouillon: { variant: "secondary", text: "Brouillon", icon: Edit },
      active: { variant: "default", text: "Active", icon: Clock },
      fermee: { variant: "outline", text: "Fermée", icon: CheckCircle },
      archivee: { variant: "secondary", text: "Archivée", icon: Archive }
    };
    
    const config = variants[status] || variants.brouillon;
    const Icon = config.icon;
    
    return (
      <Badge variant={config.variant} className="flex items-center gap-1">
        <Icon className="w-3 h-3" />
        {config.text}
      </Badge>
    );
  };

  const getTabCounts = () => ({
    all: requests.length,
    brouillon: requests.filter(r => r.status === "brouillon").length,
    active: requests.filter(r => r.status === "active").length,
    fermee: requests.filter(r => r.status === "fermee").length
  });

  const tabCounts = getTabCounts();

  return (
    <div className="p-4 md:p-8 min-h-screen">
      <div className="max-w-6xl mx-auto space-y-6">
        {/* En-tête */}
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
          <div>
            <h1 className="text-2xl md:text-3xl font-bold text-slate-800">
              Mes demandes
            </h1>
            <p className="text-slate-600 mt-1">
              Gérez toutes vos demandes de consentement
            </p>
          </div>
        </div>

        {/* Barre de recherche et filtres */}
        <Card className="bg-white/80 backdrop-blur-sm border-0 shadow-sm">
          <CardContent className="p-4">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="relative flex-1">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 w-4 h-4" />
                <Input
                  placeholder="Rechercher une demande..."
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                  className="pl-10 bg-white"
                />
              </div>
              <FilterBar onFilterChange={(filters) => {}} />
            </div>
          </CardContent>
        </Card>

        {/* Onglets */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid w-full grid-cols-4 bg-white/80 backdrop-blur-sm">
            <TabsTrigger value="all" className="flex items-center gap-2">
              Toutes
              <Badge variant="secondary" className="ml-1">{tabCounts.all}</Badge>
            </TabsTrigger>
            <TabsTrigger value="brouillon" className="flex items-center gap-2">
              Brouillons
              <Badge variant="secondary" className="ml-1">{tabCounts.brouillon}</Badge>
            </TabsTrigger>
            <TabsTrigger value="active" className="flex items-center gap-2">
              Actives
              <Badge variant="secondary" className="ml-1">{tabCounts.active}</Badge>
            </TabsTrigger>
            <TabsTrigger value="fermee" className="flex items-center gap-2">
              Fermées
              <Badge variant="secondary" className="ml-1">{tabCounts.fermee}</Badge>
            </TabsTrigger>
          </TabsList>

          <TabsContent value={activeTab} className="mt-6">
            {isLoading ? (
              <div className="grid gap-4">
                {Array(3).fill(0).map((_, i) => (
                  <Card key={i} className="animate-pulse">
                    <CardHeader className="space-y-2">
                      <div className="h-4 bg-slate-200 rounded w-3/4"></div>
                      <div className="h-3 bg-slate-200 rounded w-1/2"></div>
                    </CardHeader>
                    <CardContent>
                      <div className="space-y-2">
                        <div className="h-3 bg-slate-200 rounded"></div>
                        <div className="h-3 bg-slate-200 rounded w-5/6"></div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            ) : filteredRequests.length === 0 ? (
              <Card className="text-center py-12 bg-white/80 backdrop-blur-sm border-0 shadow-sm">
                <CardContent>
                  <FileText className="w-12 h-12 mx-auto mb-4 text-slate-400" />
                  <h3 className="text-lg font-semibold text-slate-700 mb-2">
                    Aucune demande trouvée
                  </h3>
                  <p className="text-slate-500">
                    {activeTab === "all" 
                      ? "Vous n'avez pas encore créé de demande de consentement."
                      : `Aucune demande avec le statut "${activeTab}".`}
                  </p>
                </CardContent>
              </Card>
            ) : (
              <div className="grid gap-4">
                {filteredRequests.map((request) => (
                  <RequestCard
                    key={request.id}
                    request={request}
                    onUpdate={loadRequests}
                  />
                ))}
              </div>
            )}
          </TabsContent>
        </Tabs>
      </div>
    </div>
  );
}
